# Generated by Django 4.1.4 on 2022-12-18 15:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Carriage',
            fields=[
                ('carriagecode', models.CharField(db_column='CarriageCode', max_length=4, primary_key=True, serialize=False)),
                ('carriagename', models.CharField(db_column='CarriageName', max_length=30)),
            ],
            options={
                'db_table': 'carriage',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('cityid', models.AutoField(db_column='CityID', primary_key=True, serialize=False)),
                ('cityname', models.CharField(db_column='CityName', max_length=30)),
                ('provincename', models.CharField(db_column='ProvinceName', max_length=15)),
            ],
            options={
                'db_table': 'city',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customercode', models.CharField(db_column='CustomerCode', max_length=13, primary_key=True, serialize=False)),
                ('customername', models.CharField(db_column='CustomerName', max_length=50)),
                ('address', models.CharField(db_column='Address', max_length=75)),
                ('gst', models.CharField(db_column='GST', max_length=13)),
                ('ntn', models.CharField(db_column='NTN', max_length=8)),
                ('isactive', models.IntegerField(db_column='IsActive', default=True)),
            ],
            options={
                'db_table': 'customer',
            },
        ),
        migrations.CreateModel(
            name='Ldn',
            fields=[
                ('ldnnumber', models.CharField(db_column='LDNNumber', max_length=10, primary_key=True, serialize=False)),
                ('ldndate', models.DateField(auto_now_add=True, db_column='LDNDate')),
                ('isldnverified', models.IntegerField(db_column='IsLDNVerified', default=False)),
                ('trucknumber', models.CharField(db_column='TruckNumber', max_length=10)),
                ('drivercnic', models.CharField(db_column='DriverCNIC', max_length=13)),
                ('calibrationexpirydate', models.DateField(db_column='CalibrationExpiryDate')),
                ('carriagecode', models.ForeignKey(db_column='CarriageCode', on_delete=django.db.models.deletion.RESTRICT, to='base.carriage')),
            ],
            options={
                'db_table': 'ldn',
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('pricecode', models.CharField(db_column='PriceCode', max_length=4, primary_key=True, serialize=False)),
                ('pricetitle', models.CharField(db_column='PriceTitle', max_length=50)),
            ],
            options={
                'db_table': 'price',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('productcode', models.CharField(db_column='ProductCode', max_length=16, primary_key=True, serialize=False)),
                ('productname', models.CharField(db_column='ProductName', max_length=50)),
                ('units', models.CharField(db_column='Units', max_length=11)),
                ('isactive', models.BooleanField(db_column='IsActive', default=True)),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='Purchaseorder',
            fields=[
                ('ponumber', models.CharField(db_column='PONumber', max_length=10, primary_key=True, serialize=False)),
                ('podeliverydate', models.DateField(db_column='PODeliveryDate')),
                ('totalpayableamount', models.FloatField(db_column='TotalPayableAmount')),
                ('advancepayment', models.FloatField(db_column='AdvancePayment')),
                ('advancepaymenttrxid', models.CharField(db_column='AdvancePaymentTrxID', max_length=20)),
                ('datecreated', models.DateField(auto_now_add=True, db_column='DateCreated')),
                ('purchaseinvoicenum', models.CharField(blank=True, db_column='PurchaseInvoiceNum', default=None, max_length=10, null=True)),
                ('finalpaymenttrxid', models.CharField(blank=True, db_column='FinalPaymentTrxID', default=None, max_length=20, null=True)),
                ('createdby', models.ForeignKey(db_column='CreatedBy', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'purchaseorder',
            },
        ),
        migrations.CreateModel(
            name='Saleinvoice',
            fields=[
                ('invoicenumber', models.CharField(db_column='InvoiceNumber', max_length=11, primary_key=True, serialize=False)),
                ('invoicedate', models.DateField(auto_now_add=True, db_column='InvoiceDate')),
                ('totalamount', models.FloatField(db_column='TotalAmount')),
                ('paymenttrxid', models.CharField(db_column='PaymentTrxID', max_length=20)),
                ('createdby', models.ForeignKey(db_column='CreatedBy', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('customercode', models.ForeignKey(db_column='CustomerCode', on_delete=django.db.models.deletion.RESTRICT, to='base.customer')),
                ('deliverycityid', models.ForeignKey(db_column='DeliveryCityID', on_delete=django.db.models.deletion.RESTRICT, to='base.city')),
                ('ldnnumber', models.ForeignKey(blank=True, db_column='LDNNumber', on_delete=django.db.models.deletion.RESTRICT, to='base.ldn')),
            ],
            options={
                'db_table': 'saleinvoice',
            },
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('sellercode', models.CharField(db_column='SellerCode', max_length=13, primary_key=True, serialize=False)),
                ('sellername', models.CharField(db_column='SellerName', max_length=50)),
                ('gst', models.CharField(db_column='GST', max_length=13)),
                ('ntn', models.CharField(db_column='NTN', max_length=8)),
                ('isactive', models.BooleanField(blank=True, db_column='IsActive', default=True)),
            ],
            options={
                'db_table': 'seller',
            },
        ),
        migrations.CreateModel(
            name='Supplypoint',
            fields=[
                ('supplypointcode', models.CharField(db_column='SupplyPointCode', max_length=11, primary_key=True, serialize=False)),
                ('supplypointname', models.CharField(db_column='SupplyPointName', max_length=30)),
                ('isactive', models.BooleanField(db_column='IsActive', default=True)),
            ],
            options={
                'db_table': 'supplypoint',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('stockid', models.AutoField(db_column='StockID', primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True, db_column='Date')),
                ('quantity', models.FloatField(db_column='Quantity')),
                ('productcode', models.ForeignKey(db_column='ProductCode', on_delete=django.db.models.deletion.RESTRICT, to='base.product')),
                ('supplypointcode', models.ForeignKey(db_column='SupplyPointCode', on_delete=django.db.models.deletion.RESTRICT, to='base.supplypoint')),
                ('takenby', models.ForeignKey(db_column='TakenBy', max_length=30, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'stock',
            },
        ),
        migrations.CreateModel(
            name='Saleinvoicetransaction',
            fields=[
                ('saleinvoicetransactionid', models.AutoField(db_column='SaleInvoiceTransactionID', primary_key=True, serialize=False)),
                ('saletransactionnumber', models.IntegerField(db_column='SaleTransactionNumber')),
                ('ldntransactionnumber', models.IntegerField(db_column='LDNTransactionNumber')),
                ('gravity', models.FloatField(db_column='Gravity')),
                ('temperature', models.FloatField(db_column='Temperature')),
                ('discountrate', models.FloatField(db_column='DiscountRate')),
                ('quantity', models.FloatField(db_column='Quantity')),
                ('freightcharges', models.FloatField(db_column='FreightCharges')),
                ('isdelivered', models.IntegerField(db_column='IsDelivered', default=False)),
                ('invoicenumber', models.ForeignKey(db_column='InvoiceNumber', on_delete=django.db.models.deletion.RESTRICT, to='base.saleinvoice')),
                ('pricecode', models.ForeignKey(db_column='PriceCode', on_delete=django.db.models.deletion.RESTRICT, to='base.price')),
                ('productcode', models.ForeignKey(db_column='ProductCode', on_delete=django.db.models.deletion.RESTRICT, to='base.product')),
            ],
            options={
                'db_table': 'saleinvoicetransaction',
            },
        ),
        migrations.CreateModel(
            name='Purchaseordertransaction',
            fields=[
                ('purchaseordertransactionid', models.AutoField(db_column='PurchaseOrderTransactionID', primary_key=True, serialize=False)),
                ('potransactionnum', models.IntegerField(db_column='POTransactionNum')),
                ('quantity', models.FloatField(db_column='Quantity')),
                ('rate', models.FloatField(db_column='Rate')),
                ('freightcharges', models.FloatField(db_column='FreightCharges')),
                ('payableamount', models.FloatField(db_column='PayableAmount')),
                ('isdelivered', models.IntegerField(db_column='IsDelivered', default=True)),
                ('deliveredquantity', models.FloatField(blank=True, db_column='DeliveredQuantity')),
                ('datedelivered', models.DateField(auto_now=True, db_column='DateDelivered')),
                ('ponumber', models.ForeignKey(db_column='PONumber', on_delete=django.db.models.deletion.RESTRICT, to='base.purchaseorder')),
                ('productcode', models.ForeignKey(db_column='ProductCode', on_delete=django.db.models.deletion.RESTRICT, to='base.product')),
                ('supplypointcode', models.ForeignKey(db_column='SupplyPointCode', on_delete=django.db.models.deletion.RESTRICT, to='base.supplypoint')),
            ],
            options={
                'db_table': 'purchaseordertransaction',
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='sellercode',
            field=models.ForeignKey(db_column='SellerCode', on_delete=django.db.models.deletion.RESTRICT, to='base.seller'),
        ),
        migrations.CreateModel(
            name='Productprice',
            fields=[
                ('productpriceid', models.AutoField(db_column='ProductPriceID', primary_key=True, serialize=False)),
                ('dateadded', models.DateField(auto_now_add=True, db_column='DateAdded')),
                ('sellingrate', models.FloatField(db_column='SellingRate')),
                ('loadingrate', models.FloatField(db_column='LoadingRate')),
                ('pricecode', models.ForeignKey(db_column='PriceCode', on_delete=django.db.models.deletion.RESTRICT, to='base.price')),
                ('productcode', models.ForeignKey(db_column='ProductCode', on_delete=django.db.models.deletion.RESTRICT, to='base.product')),
            ],
            options={
                'db_table': 'productprice',
            },
        ),
        migrations.CreateModel(
            name='Pricerate',
            fields=[
                ('pricerateid', models.AutoField(db_column='PriceRateID', primary_key=True, serialize=False)),
                ('dateupdated', models.DateField(auto_now_add=True, db_column='DateUpdated')),
                ('saletaxrate', models.FloatField(db_column='SaleTaxRate')),
                ('maxdiscountrate', models.FloatField(db_column='MaxDiscountRate')),
                ('pricecode', models.ForeignKey(db_column='PriceCode', on_delete=django.db.models.deletion.RESTRICT, to='base.price')),
            ],
            options={
                'db_table': 'pricerate',
            },
        ),
        migrations.CreateModel(
            name='Customerack',
            fields=[
                ('customeracknumber', models.CharField(db_column='CustomerACKNumber', max_length=15, primary_key=True, serialize=False)),
                ('ackquantity', models.FloatField(db_column='AckQuantity')),
                ('ackdate', models.DateField(auto_now_add=True, db_column='ACKDate')),
                ('ackshortagequantity', models.FloatField(db_column='AckShortageQuantity')),
                ('saleinvoicetransactionid', models.ForeignKey(db_column='SaleInvoiceTransactionID', on_delete=django.db.models.deletion.RESTRICT, related_name='invoivenumbercustack', to='base.saleinvoicetransaction')),
            ],
            options={
                'db_table': 'customerack',
            },
        ),
        migrations.CreateModel(
            name='Supplypointsproducts',
            fields=[
                ('supplypointsproductsid', models.AutoField(db_column='SupplyPointsProductsID', primary_key=True, serialize=False)),
                ('productcode', models.ForeignKey(db_column='ProductCode', on_delete=django.db.models.deletion.RESTRICT, to='base.product')),
                ('supplypointcode', models.ForeignKey(db_column='SupplyPointCode', on_delete=django.db.models.deletion.RESTRICT, to='base.supplypoint')),
            ],
            options={
                'db_table': 'supplypointsproducts',
                'unique_together': {('supplypointcode', 'productcode')},
            },
        ),
        migrations.AddConstraint(
            model_name='stock',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0)), name='stock_check_1'),
        ),
        migrations.AlterUniqueTogether(
            name='stock',
            unique_together={('supplypointcode', 'productcode', 'date')},
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('saletransactionnumber__gt', 0)), name='sale_invoice_trans_check_1'),
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('ldntransactionnumber__gt', 0)), name='sale_invoice_trans_check_2'),
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('gravity__gt', 0), ('gravity__lt', 1)), name='sale_invoice_trans_check_3'),
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('temperature__gt', 0)), name='sale_invoice_trans_check_4'),
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('discountrate__gte', 0), ('discountrate__lte', 100)), name='sale_invoice_trans_check_5'),
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gt', 0)), name='sale_invoice_trans_check_6'),
        ),
        migrations.AddConstraint(
            model_name='saleinvoicetransaction',
            constraint=models.CheckConstraint(check=models.Q(('freightcharges__gte', 0)), name='sale_invoice_trans_check_7'),
        ),
        migrations.AlterUniqueTogether(
            name='saleinvoicetransaction',
            unique_together={('invoicenumber', 'saletransactionnumber')},
        ),
        migrations.AddConstraint(
            model_name='saleinvoice',
            constraint=models.CheckConstraint(check=models.Q(('totalamount__gt', 0)), name='sale_invoice_check_1'),
        ),
        migrations.AddConstraint(
            model_name='purchaseordertransaction',
            constraint=models.CheckConstraint(check=models.Q(('potransactionnum__gt', 0)), name='purchase_order_trans_check_1'),
        ),
        migrations.AddConstraint(
            model_name='purchaseordertransaction',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gt', 0)), name='purchase_order_trans_check_2'),
        ),
        migrations.AddConstraint(
            model_name='purchaseordertransaction',
            constraint=models.CheckConstraint(check=models.Q(('rate__gt', 0)), name='purchase_order_trans_check_3'),
        ),
        migrations.AddConstraint(
            model_name='purchaseordertransaction',
            constraint=models.CheckConstraint(check=models.Q(('freightcharges__gte', 0)), name='purchase_order_trans_check_4'),
        ),
        migrations.AddConstraint(
            model_name='purchaseordertransaction',
            constraint=models.CheckConstraint(check=models.Q(('payableamount__gt', 0)), name='purchase_order_trans_check_5'),
        ),
        migrations.AddConstraint(
            model_name='purchaseordertransaction',
            constraint=models.CheckConstraint(check=models.Q(('deliveredquantity__gt', 0)), name='purchase_order_trans_check_6'),
        ),
        migrations.AlterUniqueTogether(
            name='purchaseordertransaction',
            unique_together={('ponumber', 'potransactionnum')},
        ),
        migrations.AddConstraint(
            model_name='purchaseorder',
            constraint=models.CheckConstraint(check=models.Q(('totalpayableamount__gt', 0)), name='purchase_order_check_1'),
        ),
        migrations.AddConstraint(
            model_name='purchaseorder',
            constraint=models.CheckConstraint(check=models.Q(('advancepayment__gte', 0), ('advancepayment__lte', 1)), name='purchase_order_check_2'),
        ),
        migrations.AddConstraint(
            model_name='purchaseorder',
            constraint=models.CheckConstraint(check=models.Q(('podeliverydate__gte', models.F('datecreated'))), name='purchase_order_chek_3'),
        ),
        migrations.AddConstraint(
            model_name='productprice',
            constraint=models.CheckConstraint(check=models.Q(('sellingrate__gt', 0)), name='product_price_check_1'),
        ),
        migrations.AddConstraint(
            model_name='productprice',
            constraint=models.CheckConstraint(check=models.Q(('loadingrate__gt', 0)), name='product_price_check_2'),
        ),
        migrations.AlterUniqueTogether(
            name='productprice',
            unique_together={('productcode', 'pricecode', 'dateadded')},
        ),
        migrations.AddConstraint(
            model_name='pricerate',
            constraint=models.CheckConstraint(check=models.Q(('saletaxrate__gt', 0)), name='price_rate_check_1'),
        ),
        migrations.AddConstraint(
            model_name='pricerate',
            constraint=models.CheckConstraint(check=models.Q(('maxdiscountrate__gt', 0)), name='price_rate_check_2'),
        ),
        migrations.AlterUniqueTogether(
            name='pricerate',
            unique_together={('pricecode', 'dateupdated')},
        ),
        migrations.AddConstraint(
            model_name='customerack',
            constraint=models.CheckConstraint(check=models.Q(('ackquantity__gt', 0)), name='customer_ack_check_01'),
        ),
        migrations.AddConstraint(
            model_name='customerack',
            constraint=models.CheckConstraint(check=models.Q(('ackshortagequantity__gte', 0)), name='customer_ack_check_02'),
        ),
    ]
